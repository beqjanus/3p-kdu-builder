name: Build KDU binaries and 3p-packages
on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  build_matrix:
    strategy:
      matrix:
        os: [macos-14,ubuntu-22.04,windows-2022]
        addrsize: [64]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        if: runner.os != 'Windows'
        id: py311
        with:
          python-version: '3.11'
          cache: 'pip'
      - run: pip3 install -r requirements.txt

      # - name: Set gcc version on Linux
      #   if: runner.os == 'Linux'
      #   run: |
      #     echo "CC=gcc-10" >> $GITHUB_ENV
      #     echo "CXX=g++-10" >> $GITHUB_ENV

      - name: Install Bash 4 and GNU sed on Mac
        if: runner.os == 'macOS'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew update

          brew install bash
          brew install gnu-sed

          echo "/usr/local/bin" >> $GITHUB_PATH
          echo "$(brew --prefix)/opt/gnu-sed/libexec/gnubin" >> $GITHUB_PATH

      - name: Setup rclone and download the folder
        uses: beqjanus/setup-rclone@main
        with:
          rclone_config: ${{ secrets.RCLONE_CONFIG }}

      - name: Get the repo
        uses: actions/checkout@v3
        with:
          repository: beqjanus/3p-kdu
          ref: master
          token: ${{ secrets.KDU_ACCESS_TOKEN }} 
          path: .
          fetch-depth: 0

      - name: Define platform variable(s)
        run: |
          declare -A os_map
          os_map=( ["Windows"]="windows" ["Linux"]="linux" ["macOS"]="darwin" )
          platform="${os_map[${{ runner.os}}]}"
          echo "fallback_platform=${platform}" >> $GITHUB_ENV
          if [ ${{ matrix.addrsize }} -ne 32 ];
          then
            platform+=${{ matrix.addrsize }}
          fi
          echo "platform=${platform}" >> $GITHUB_ENV
        shell: bash
        
      - name: configure the 3p-archive
        run: |
          cd autobuild
          autobuild configure --config-file=autobuild.xml -A${{ matrix.addrsize }}
          
      - name: build the 3p-archive
        run: |
          cd autobuild
          autobuild build --config-file=autobuild.xml -A${{ matrix.addrsize }}
          
      - name: build the 3p-archive
        run: |
          cd autobuild
          autobuild package --config-file=autobuild.xml -A${{ matrix.addrsize }}
        shell: bash
          
      - name: rclone ls sanity check
        run: 'rclone ls fs_bundles:'
        shell: bash
        
      - name: rclone copy the packages back to safety
        run: 'rclone copy autobuild/*.bz2 fs_bundles:'
        shell: bash
